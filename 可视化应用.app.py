import numpy as np
import pandas as pd

def load_data(filename):
    try:
        data = np.loadtxt(filename)
        cone_resistance = data[::2]  # 奇数行为锥间阻力
        side_friction = data[1::2]   # 偶数行为侧摩阻力
        return cone_resistance, side_friction
    except Exception as e:
        print(f"Error loading data from {filename}: {e}")
        return None, None

# 加载所有点位数据
S1_cone, S1_friction = load_data("D:\\python\\pythonProject\\matplotlib\\S1.TXT")
S2_cone, S2_friction = load_data("D:\\python\\pythonProject\\matplotlib\\S2.TXT")
S3_cone, S3_friction = load_data("D:\\python\\pythonProject\\matplotlib\\S3.TXT")
S4_cone, S4_friction = load_data("D:\\python\\pythonProject\\matplotlib\\S4.TXT")

# 定义深度范围
depths = np.arange(0.1, 30.4, 0.1)  # 从 0 到 30.3（包括 30.3），步长为 0.1

# 检查加载的数据
if S1_cone is None or S1_friction is None:
    raise ValueError("Failed to load S1 data.")
if S2_cone is None or S2_friction is None:
    raise ValueError("Failed to load S2 data.")
if S3_cone is None or S3_friction is None:
    raise ValueError("Failed to load S3 data.")
if S4_cone is None or S4_friction is None:
    raise ValueError("Failed to load S4 data.")

# 确保深度与锥间阻力匹配
if len(S1_cone) != len(depths):
    raise ValueError(f"S1_cone length {len(S1_cone)} does not match depths length {len(depths)}.")

# 创建 DataFrame
well_data = {
    "Depth": depths[:len(S1_cone)],  # 确保深度与锥间阻力匹配
    "Cone Resistance": S1_cone,
    "Side Friction": S1_friction,
}

# 转换为 DataFrame
df_S1 = pd.DataFrame(well_data)

# 可以继续对其他点位数据做类似处理...
# df_S2, df_S3, df_S4 的创建代码可以在这里添加

# 打印结果以验证
print("S1 DataFrame:")
print(df_S1.head())

# 创建数据字典
S1_data = {
    "Depth": depths[:len(S1_cone)],  # 确保深度与锥间阻力匹配
    "Cone Resistance": S1_cone,
    "Side Friction": S1_friction,
    "P-wave Velocity": [abs(v) for v in [-0.37006602, -0.37434013, -0.37861424, -0.38288835, -0.38716245, -0.39163357,
                -0.39991358, -0.40819358, -0.41647358, -0.42475358, -0.43467317, -0.45962224,
                -0.48457131, -0.50952038, -0.53446945, -0.5631829, -0.61364608, -0.66410927,
                -0.71457245, -0.76503564, -0.81535738, -0.86510155, -0.91484572, -0.9645899,
                -1.01433407, -1.06190466, -1.10280957, -1.14371449, -1.18461941, -1.22552433,
                -1.26606346, -1.3057288, -1.34539413, -1.38505946, -1.4247248, -1.45924707,
                -1.48397303, -1.508699, -1.53342496, -1.55815092, -1.57964869, -1.59616966,
                -1.61269062, -1.62921159, -1.64573255, -1.66225352, -1.67877448, -1.69529545,
                -1.71181641, -1.72833738, -1.73991237, -1.74637652, -1.75284066, -1.75930481,
                -1.76576896, -1.7634564, -1.75369695, -1.74393749, -1.73417803, -1.72441858,
                -1.71580641, -1.70799096, -1.70017552, -1.69236007, -1.68454463, -1.67196949,
                -1.65670939, -1.6414493, -1.62618921, -1.61092911, -1.59809471, -1.58635764,
                -1.57462057, -1.5628835, -1.55114644, -1.54819631, -1.54837044, -1.54854457,
                -1.54871869, -1.54889282, -1.55397166, -1.56037886, -1.56678606, -1.57319326,
                -1.57960046, -1.58303414, -1.58588478, -1.58873543, -1.59158607, -1.59443671,
                -1.59616165, -1.59774067, -1.59931969, -1.60089871, -1.60247773, -1.60613952,
                -1.60994746, -1.61375541, -1.61756336, -1.6213713, -1.62780209, -1.63427659,
                -1.6407511, -1.6472256, -1.65376754, -1.66229894, -1.67083035, -1.67936175,
                -1.68789315, -1.696313, -1.70348341, -1.71065382, -1.71782422, -1.72499463,
                -1.73103811, -1.72961567, -1.72819323, -1.72677079, -1.72534835, -1.72208555,
                -1.71045749, -1.69882943, -1.68720138, -1.67557332, -1.66577397, -1.66211384,
                -1.65845371, -1.65479358, -1.65113344, -1.65004864, -1.65562938, -1.66121011,
                -1.66679085, -1.67237159, -1.67892981, -1.68749187, -1.69605393, -1.70461599,
                -1.71317805, -1.71722641, -1.71381735, -1.71040829, -1.70699923, -1.70359018,
                -1.69981057, -1.69553216, -1.69125374, -1.68697533, -1.68269691, -1.67807975,
                -1.6730888, -1.66809785, -1.6631069, -1.65811595, -1.65174991, -1.64413769,
                -1.63652547, -1.62891326, -1.62130104, -1.61197823, -1.6013847, -1.59079116,
                -1.58019763, -1.56960409, -1.56450713, -1.56273704, -1.56096695, -1.55919687,
                -1.55742678, -1.5613501, -1.5680507, -1.57475131, -1.58145191, -1.58815251,
                -1.59548347, -1.60305797, -1.61063247, -1.61820698, -1.62578148, -1.63167894,
                -1.63707687, -1.64247479, -1.64787271, -1.65327063, -1.65707511, -1.66052903,
                -1.66398295, -1.66743687, -1.67089079, -1.67707957, -1.68368116, -1.69028275,
                -1.69688434, -1.70348593, -1.70719785, -1.71065177, -1.71410568, -1.7175596,
                -1.72101352, -1.71924649, -1.71730249, -1.71535849, -1.71341448, -1.71137016,
                -1.70330634, -1.69524253, -1.68717872, -1.67911491, -1.67117857, -1.66505876,
                -1.65893895, -1.65281914, -1.64669934, -1.64081527, -1.63674975, -1.63268423,
                -1.62861871, -1.62455319, -1.62019085, -1.61431475, -1.60843864, -1.60256254,
                -1.59668643, -1.59270634, -1.59572692, -1.59874751, -1.60176809, -1.60478867,
                -1.61013087, -1.62200263, -1.63387439, -1.64574615, -1.65761791, -1.66948967,
                -1.68136143, -1.69323319, -1.70510495, -1.71697671, -1.72712249, -1.73420859,
                -1.7412947, -1.7483808, -1.7554669, -1.75964886, -1.75964886, -1.75964886,
                -1.75964886, -1.75964886, -1.75639622, -1.74931012, -1.74222402, -1.73513792,
                -1.72805182, -1.71853366, -1.7066619, -1.69479014, -1.68291838, -1.67104662,
                -1.66129928, -1.65323898, -1.64517868, -1.63711839, -1.62905809, -1.62265452,
                -1.61732559, -1.61199665, -1.60666772, -1.60133879, -1.60184375, -1.60541151,
                -1.60897927, -1.61254702, -1.61611478, -1.61840622, -1.62016339, -1.62192056,
                -1.62367773, -1.6254349, -1.62586699, -1.62586699, -1.62586699, -1.62586699,
                -1.62586699, -1.62445549, -1.62269832, -1.62094115, -1.61918398, -1.61742681,
                -1.61099576, -1.60375576, -1.59651577, -1.58927577, -1.58203577, -1.57645203,
                -1.57104897, -1.56564591, -1.56024285, -1.55483979, -1.54613698, -1.53726348,
                -1.52838998, -1.51951649, -1.51064299]]
}

S2_data = {
    "Depth": depths[:len(S2_cone)],
    "Cone Resistance": S2_cone,
    "Side Friction": S2_friction,
    "P-wave Velocity":  [abs(v) for v in [-0.39746153, -0.40506304, -0.41266454, -0.42026605, -0.42786756, -0.43574923,
                -0.44904742, -0.46234561, -0.47564381, -0.488942, -0.50399792, -0.53516639,
                -0.56633485, -0.59750332, -0.62867178, -0.66253587, -0.7119747, -0.76141353,
                -0.81085236, -0.86029119, -0.91253582, -0.97623744, -1.03993905, -1.10364067,
                -1.16734229, -1.22611262, -1.26976034, -1.31340805, -1.35705576, -1.40070347,
                -1.43919212, -1.46535635, -1.49152058, -1.5176848, -1.54384903, -1.5636894,
                -1.57148433, -1.57927926, -1.58707419, -1.59486912, -1.59941622, -1.59895627,
                -1.59849631, -1.59803636, -1.5975764, -1.588138, -1.56739342, -1.54664883,
                -1.52590425, -1.50515966, -1.49221952, -1.48734398, -1.48246843, -1.47759289,
                -1.47271734, -1.47797764, -1.49183803, -1.50569843, -1.51955882, -1.53341922,
                -1.54853668, -1.56452711, -1.58051753, -1.59650796, -1.61249838, -1.61905247,
                -1.62028351, -1.62151454, -1.62274558, -1.62397661, -1.62494172, -1.62578654,
                -1.62663135, -1.62747616, -1.62832097, -1.6282198, -1.62778229, -1.62734477,
                -1.62690726, -1.62646974, -1.62615153, -1.62586562, -1.62557972, -1.62529381,
                -1.62500791, -1.63268749, -1.64192894, -1.65117038, -1.66041182, -1.66965327,
                -1.67690629, -1.68390156, -1.69089683, -1.6978921, -1.70488736, -1.70600852,
                -1.70671745, -1.70742638, -1.70813532, -1.70884425, -1.70751718, -1.70615619,
                -1.70479519, -1.70343419, -1.70183609, -1.69324324, -1.68465039, -1.67605754,
                -1.66746469, -1.65862065, -1.64696327, -1.63530589, -1.6236485, -1.61199112,
                -1.60121386, -1.59626735, -1.59132084, -1.58637433, -1.58142782, -1.57778263,
                -1.5800525, -1.58232238, -1.58459225, -1.58686212, -1.58990136, -1.59552349,
                -1.60114562, -1.60676775, -1.61238988, -1.61883992, -1.62743277, -1.63602562,
                -1.64461847, -1.65321132, -1.65898684, -1.65898684, -1.65898684, -1.65898684,
                -1.65898684, -1.65574691, -1.64715406, -1.63856121, -1.62996836, -1.62137551,
                -1.61404887, -1.60842674, -1.60280461, -1.59718248, -1.59156035, -1.58902835,
                -1.58990615, -1.59078395, -1.59166175, -1.59253955, -1.59397667, -1.59592067,
                -1.59786467, -1.59980868, -1.60175268, -1.60693093, -1.61451178, -1.62209262,
                -1.62967347, -1.63725431, -1.64712145, -1.6583724, -1.66962335, -1.6808743,
                -1.69212524, -1.70582907, -1.72072943, -1.73562979, -1.75053014, -1.7654305,
                -1.77564238, -1.78404281, -1.79244324, -1.80084367, -1.80924409, -1.80458775,
                -1.79604216, -1.78749656, -1.77895097, -1.77040538, -1.75981948, -1.74878472,
                -1.73774996, -1.72671519, -1.71568043, -1.70725372, -1.69922067, -1.69118762,
                -1.68315457, -1.67512153, -1.673312, -1.67205814, -1.67080428, -1.66955043,
                -1.66829657, -1.66438833, -1.66039012, -1.6563919, -1.65239369, -1.64844699,
                -1.64759126, -1.64673552, -1.64587979, -1.64502405, -1.64393586, -1.63953517,
                -1.63513448, -1.63073379, -1.6263331, -1.6217496, -1.61575578, -1.60976197,
                -1.60376816, -1.59777435, -1.59119448, -1.58162572, -1.57205697, -1.56248821,
                -1.55291945, -1.5448847, -1.54251396, -1.54014323, -1.53777249, -1.53540175,
                -1.53523577, -1.54127065, -1.54730553, -1.55334041, -1.5593753, -1.56414671,
                -1.56612522, -1.56810372, -1.57008222, -1.57206073, -1.57595963, -1.58326286,
                -1.5905661, -1.59786934, -1.60517258, -1.60938281, -1.60913911, -1.60889541,
                -1.60865171, -1.60840801, -1.60786952, -1.60698362, -1.60609771, -1.6052118,
                -1.60432589, -1.60596392, -1.61004446, -1.614125, -1.61820554, -1.62228608,
                -1.62754818, -1.63374859, -1.63994899, -1.6461494, -1.65234981, -1.66143911,
                -1.6724023, -1.6833655, -1.69432869, -1.70529188, -1.71599428, -1.72655976,
                -1.73712524, -1.74769072, -1.75825621, -1.76613492, -1.77288895, -1.77964297,
                -1.78639699, -1.79315101, -1.79800889, -1.80224847, -1.80648804, -1.81072761,
                -1.81496719, -1.82016112, -1.82558877, -1.83101642, -1.83644408, -1.84187173,
                -1.84672999, -1.8514897, -1.8562494, -1.86100911, -1.86576882, -1.86454644,
                -1.86267146, -1.86079648, -1.85892151, -1.85704653, -1.86438315, -1.87219622,
                -1.8800093, -1.88782237, -1.89563545]]
}

S3_data = {
    "Depth": depths[:len(S3_cone)],
    "Cone Resistance": S3_cone,
    "Side Friction": S3_friction,
    "P-wave Velocity": [abs(v) for v in [-0.55468715, -0.57445318, -0.59421921, -0.61398523, -0.63375126, -0.6536714,
                -0.67657109, -0.69947078, -0.72237046, -0.74527015, -0.76911005, -0.80156854,
                -0.83402703, -0.86648552, -0.89894401, -0.93208618, -0.96917853, -1.00627088,
                -1.04336323, -1.08045558, -1.12083069, -1.17461045, -1.2283902, -1.28216996,
                -1.33594971, -1.38467065, -1.41787786, -1.45108507, -1.48429228, -1.51749949,
                -1.54634605, -1.5647755, -1.58320495, -1.6016344, -1.62006385, -1.63184082,
                -1.6309464, -1.63005198, -1.62915756, -1.62826315, -1.62678717, -1.62441463,
                -1.62204209, -1.61966954, -1.617297, -1.61410335, -1.60987572, -1.60564809,
                -1.60142046, -1.59719283, -1.60023914, -1.61080187, -1.6213646, -1.63192733,
                -1.64249005, -1.65847184, -1.67905163, -1.69963141, -1.72021119, -1.74079097,
                -1.75507381, -1.76498377, -1.77489373, -1.78480369, -1.79471365, -1.80012861,
                -1.80300793, -1.80588724, -1.80876656, -1.81164588, -1.80417892, -1.79203149,
                -1.77988406, -1.76773663, -1.7555892, -1.7423104, -1.72862932, -1.71494825,
                -1.70126718, -1.68758611, -1.67941998, -1.67274748, -1.66607499, -1.65940249,
                -1.65272999, -1.66173423, -1.67381234, -1.68589046, -1.69796857, -1.71004668,
                -1.72357926, -1.73730038, -1.7510215, -1.76474262, -1.77846374, -1.79430412,
                -1.81029322, -1.82628231, -1.84227141, -1.8582605, -1.86338804, -1.86833455,
                -1.87328106, -1.87822757, -1.88291046, -1.87981661, -1.87672276, -1.8736289,
                -1.87053505, -1.86721768, -1.86139691, -1.85557613, -1.84975536, -1.84393459,
                -1.83755475, -1.82747109, -1.81738742, -1.80730376, -1.79722009, -1.78685264,
                -1.77519526, -1.76353788, -1.7518805, -1.74022312, -1.7305521, -1.7275496,
                -1.72454709, -1.72154459, -1.71854208, -1.71467299, -1.70856097, -1.70244895,
                -1.69633694, -1.69022492, -1.68482982, -1.68090442, -1.67697901, -1.67305361,
                -1.6691282, -1.66648459, -1.66595871, -1.66543284, -1.66490697, -1.66438109,
                -1.6635392, -1.66227189, -1.66100459, -1.65973728, -1.65846998, -1.65923258,
                -1.66223509, -1.66523759, -1.66824009, -1.6712426, -1.67587632, -1.68198834,
                -1.68810036, -1.69421237, -1.70032439, -1.70518179, -1.7091072, -1.71303261,
                -1.71695801, -1.72088342, -1.72847096, -1.73827506, -1.74807916, -1.75788326,
                -1.76768736, -1.7842376, -1.80407865, -1.8239197, -1.84576074, -1.86360179,
                -1.87625988, -1.88614273, -1.89602559, -1.90590845, -1.9157913, -1.92460126,
                -1.93309162, -1.94158199, -1.95007235, -1.95856272, -1.96039089, -1.96075337,
                -1.96111585, -1.96147834, -1.96184082, -1.96021501, -1.95828909, -1.95636316,
                -1.95443724, -1.95251131, -1.94058263, -1.92776084, -1.91493905, -1.90211726,
                -1.88929547, -1.88009529, -1.87101787, -1.86194046, -1.85286304, -1.8438012,
                -1.83567332, -1.82754544, -1.81941755, -1.81128967, -1.80311138, -1.79421469,
                -1.785318, -1.77642131, -1.76752462, -1.7588357, -1.7517496, -1.7446635,
                -1.7375774, -1.7304913, -1.72329347, -1.71552587, -1.70775827, -1.69999067,
                -1.69222307, -1.68593921, -1.68513377, -1.68432833, -1.68352289, -1.68271745,
                -1.68262843, -1.68455436, -1.68648029, -1.68840621, -1.69033214, -1.69286063,
                -1.69672109, -1.70058154, -1.704442, -1.70830246, -1.71223687, -1.71630239,
                -1.72036791, -1.72443343, -1.72849895, -1.72994906, -1.72763299, -1.72531692,
                -1.72300085, -1.72068479, -1.71623609, -1.70927393, -1.70231177, -1.69534961,
                -1.68838745, -1.68244964, -1.67750313, -1.67255662, -1.66761012, -1.66266361,
                -1.65918325, -1.65686718, -1.65455111, -1.65223504, -1.64991897, -1.64778512,
                -1.64576948, -1.64375383, -1.64173818, -1.63972253, -1.63920317, -1.63946937,
                -1.63973557, -1.64000176, -1.64026796, -1.6376252, -1.63376475, -1.62990429,
                -1.62604383, -1.62218337, -1.62016142, -1.61873898, -1.61731654, -1.6158941,
                -1.61447165, -1.62009778, -1.62745008, -1.63480238, -1.64215467, -1.64950697,
                -1.66181361, -1.67497772, -1.68814183, -1.70130594, -1.71447005, -1.74584896,
                -1.77921494, -1.81258093, -1.84594691, -1.87931289, -1.93298248, -1.98770225,
                -2.04242203, -2.0971418, -2.15186158]]
}

S4_data = {
    "Depth": depths[:len(S4_cone)],
    "Cone Resistance": S4_cone,
    "Side Friction": S4_friction,
    "P-wave Velocity":  [abs(v) for v in[-0.77019763, -0.78661001, -0.80302238, -0.81943476, -0.83584713, -0.85279341,
                -0.88006175, -0.90733008, -0.93459842, -0.96186676, -0.99079502, -1.03493916,
                -1.07908331, -1.12322745, -1.1673716, -1.21135475, -1.25440776, -1.29746077,
                -1.34051378, -1.38356679, -1.42646701, -1.46874331, -1.51101961, -1.5532959,
                -1.5955722, -1.63235011, -1.65226629, -1.67218246, -1.69209864, -1.71201482,
                -1.72574671, -1.72470504, -1.72366337, -1.7226217, -1.72158002, -1.7117941,
                -1.68535245, -1.6589108, -1.63246915, -1.60602751, -1.58275497, -1.56436813,
                -1.5459813, -1.52759446, -1.50920763, -1.49519275, -1.48668329, -1.47817382,
                -1.46966436, -1.4611549, -1.46428075, -1.47942976, -1.49457876, -1.50972777,
                -1.52487678, -1.53276015, -1.53447873, -1.53619732, -1.53791591, -1.53963449,
                -1.54452314, -1.55161321, -1.55870329, -1.56579336, -1.57288343, -1.58200241,
                -1.59226589, -1.60252938, -1.61279286, -1.62305635, -1.62467615, -1.62238572,
                -1.62009528, -1.61780485, -1.61551442, -1.61118848, -1.60613882, -1.60108915,
                -1.59603948, -1.59098981, -1.5973892, -1.60688937, -1.61638954, -1.62588971,
                -1.63538988, -1.63768823, -1.63857444, -1.63946066, -1.64034688, -1.64123309,
                -1.64076375, -1.64011868, -1.63947361, -1.63882855, -1.63818348, -1.64419112,
                -1.65066562, -1.65714012, -1.66361462, -1.67008912, -1.66860211, -1.66698241,
                -1.6653627, -1.663743, -1.66224361, -1.66429348, -1.66634335, -1.66839322,
                -1.67044309, -1.67280659, -1.67868269, -1.6845588, -1.69043491, -1.69631101,
                -1.70160303, -1.70302547, -1.70444791, -1.70587035, -1.70729279, -1.70895127,
                -1.71168264, -1.71441401, -1.71714538, -1.71987674, -1.72260006, -1.72529634,
                -1.72799263, -1.73068891, -1.7333852, -1.7367336, -1.74176983, -1.74680606,
                -1.75184229, -1.75687852, -1.76036986, -1.76069416, -1.76101846, -1.76134276,
                -1.76166706, -1.75937996, -1.75277837, -1.74617678, -1.73957519, -1.7329736,
                -1.72392036, -1.71156682, -1.69921328, -1.68685974, -1.6745062, -1.66345117,
                -1.653829, -1.64420682, -1.63458465, -1.62496248, -1.62139832, -1.62332425,
                -1.62525018, -1.62717611, -1.62910203, -1.6290097, -1.6274181, -1.62582649,
                -1.62423489, -1.62264328, -1.62080271, -1.61881145, -1.61682019, -1.61482893,
                -1.61283767, -1.61186592, -1.6113915, -1.61091707, -1.61044264, -1.60996822,
                -1.6130199, -1.61743395, -1.621848, -1.62626204, -1.63067609, -1.63371888,
                -1.63635322, -1.63898755, -1.64162188, -1.64425622, -1.64736348, -1.65057479,
                -1.6537861, -1.65699741, -1.66020872, -1.66101002, -1.66144753, -1.66188505,
                -1.66232256, -1.66276008, -1.66180509, -1.66072577, -1.65964645, -1.65856714,
                -1.65748782, -1.65364909, -1.64971683, -1.64578456, -1.6418523, -1.63782238,
                -1.62793319, -1.618044, -1.6081548, -1.59826561, -1.58907172, -1.58978581,
                -1.5904999, -1.591214, -1.59192809, -1.59353331, -1.60201294, -1.61049258,
                -1.61897221, -1.62745184, -1.63726829, -1.65390249, -1.67053669, -1.6871709,
                -1.7038051, -1.71942436, -1.73129612, -1.74316788, -1.75503964, -1.76691139,
                -1.77778343, -1.78584373, -1.79390403, -1.80196433, -1.81002463, -1.81568725,
                -1.81604973, -1.81641222, -1.8167747, -1.81713719, -1.81673897, -1.81499223,
                -1.81324549, -1.81149874, -1.809752, -1.80466323, -1.79476191, -1.7848606,
                -1.77495929, -1.76505798, -1.75436406, -1.74273601, -1.73110795, -1.71947989,
                -1.70785184, -1.69529109, -1.68182773, -1.66836437, -1.65490101, -1.64143765,
                -1.6294967, -1.61876471, -1.60803272, -1.59730073, -1.58656874, -1.57964492,
                -1.57519125, -1.57073759, -1.56628392, -1.56183026, -1.55737659, -1.55292293,
                -1.54846927, -1.5440156, -1.53956194, -1.536954, -1.5351187, -1.5332834,
                -1.5314481, -1.5296128, -1.5291615, -1.5291615, -1.5291615, -1.5291615,
                -1.5291615, -1.53063576, -1.53247106, -1.53430636, -1.53614166, -1.53797696,
                -1.54204431, -1.54649797, -1.55095164, -1.5554053, -1.55985896, -1.56431263,
                -1.56876629, -1.57321996, -1.57767362, -1.58212729, -1.58832599, -1.59461496,
                -1.60090392, -1.60719289, -1.61348185]]
}

# 将数据转换为 DataFrame
df_S1 = pd.DataFrame(S1_data)
df_S2 = pd.DataFrame(S2_data)
df_S3 = pd.DataFrame(S3_data)
df_S4 = pd.DataFrame(S4_data)

# 合并所有点位数据
combined_data = pd.concat([df_S1, df_S2, df_S3, df_S4], ignore_index=True)

# 保存为 CSV 文件
combined_data.to_csv("well_data.csv", index=False)

print("CSV 文件已创建：well_data.csv")
import numpy as np
import pandas as pd
from sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor
from sklearn.preprocessing import StandardScaler
from keras.models import Sequential
from keras.layers import Dense, LSTM
import streamlit as st
import matplotlib.pyplot as plt

# 数据加载和处理函数
def load_data():
    # 加载 CSV 文件
    data = pd.read_csv("well_data.csv")
    # 查看数据的前几行
    print(data)
    return data

# 训练模型的函数
def train_models(X_train, y_train):
    # 标准化
    scaler = StandardScaler()
    X_train_scaled = scaler.fit_transform(X_train)

    # 随机森林
    rf_model = RandomForestRegressor(n_estimators=100, random_state=42)
    rf_model.fit(X_train_scaled, y_train)

    # 梯度提升
    gb_model = GradientBoostingRegressor(n_estimators=100, learning_rate=0.1, max_depth=3, random_state=42)
    gb_model.fit(X_train_scaled, y_train)

    # ANN模型
    ann_model = Sequential()
    ann_model.add(Dense(10, activation='relu', input_shape=(X_train_scaled.shape[1],)))
    for _ in range(9):
        ann_model.add(Dense(10, activation='relu'))
    ann_model.add(Dense(1))
    ann_model.compile(optimizer='adam', loss='mse')
    ann_model.fit(X_train_scaled, y_train, epochs=100, verbose=0)

    # RNN模型
    X_train_rnn = X_train_scaled.reshape((X_train_scaled.shape[0], 1, X_train_scaled.shape[1]))
    rnn_model = Sequential()
    rnn_model.add(LSTM(50, activation='relu', input_shape=(X_train_rnn.shape[1], X_train_rnn.shape[2])))
    rnn_model.add(Dense(1))
    rnn_model.compile(optimizer='adam', loss='mse')
    rnn_model.fit(X_train_rnn, y_train, epochs=100, verbose=0)

    return rf_model, gb_model, ann_model, rnn_model, scaler

# 预测函数
def make_predictions(models, X_test):
    rf_model, gb_model, ann_model, rnn_model, scaler = models
    X_test_scaled = scaler.transform(X_test)
    X_test_rnn = X_test_scaled.reshape((X_test_scaled.shape[0], 1, X_test_scaled.shape[1]))

    rf_pred = rf_model.predict(X_test_scaled)
    gb_pred = gb_model.predict(X_test_scaled)
    ann_pred = ann_model.predict(X_test_scaled)
    rnn_pred = rnn_model.predict(X_test_rnn)

    return rf_pred[0], gb_pred[0], ann_pred[0][0], rnn_pred[0][0]

# Streamlit界面
def main():
    st.title('P-wave Velocity Prediction')

    st.sidebar.header('Input Parameters')
    cone_resistance = st.sidebar.number_input('Cone Resistance', min_value=0.0, value=1.0)
    side_friction = st.sidebar.number_input('Side Friction', min_value=0.0, value=1.0)
    depth = st.sidebar.number_input('Depth (m)', min_value=0.0, value=1.0)

    # 加载数据
    data = load_data()
    X = data[['Cone Resistance', 'Side Friction', 'Depth']]
    y = data['P-wave Velocity']

    # 模型训练
    models = train_models(X, y)

    # 输入的数据点
    X_test = np.array([[cone_resistance, side_friction, depth]])

    # 进行预测
    rf_pred, gb_pred, ann_pred, rnn_pred = make_predictions(models, X_test)

    # 展示预测结果
    st.write(f"Random Forest Prediction: {rf_pred:.2f}")
    st.write(f"Gradient Boosting Prediction: {gb_pred:.2f}")
    st.write(f"ANN Prediction: {ann_pred:.2f}")
    st.write(f"RNN Prediction: {rnn_pred:.2f}")

    # 绘图展示预测值
    plt.figure(figsize=(10, 6))
    methods = ['Random Forest', 'Gradient Boosting', 'ANN', 'RNN']
    predictions = [rf_pred, gb_pred, ann_pred, rnn_pred]

    # 打印预测值和它们的形状用于调试
    print("Predictions:", predictions)
    print("Shapes:", [np.shape(pred) for pred in predictions])

    plt.bar(methods, predictions, color=['blue', 'green', 'orange', 'red'])
    plt.title('Prediction Results from Different Models')
    plt.ylabel('P-wave Velocity (m/s)')
    st.pyplot(plt)

if __name__ == '__main__':
    main()
